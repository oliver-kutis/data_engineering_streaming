services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.8.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://${KAFKA_ADDRESS:-localhost}:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"

  kafka-tools:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka-tools
    container_name: kafka-tools
    command: ["tail", "-f", "/dev/null"]
    # entrypoint: [
    #     "/bin/bash",
    #     "-c",
    #     " \
    #     kafka-topics --create --topic auth_events --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \
    #     kafka-topics --create --topic listen_events --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \
    #     kafka-topics --create --topic page_view_events --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 && \
    #     kafka-topics --create --topic status_change_events --bootstrap-server broker:29092 --partitions 1 --replication-factor 1 \
    #     ",
    #   ]
    # network_mode: "host"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.8.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  eventsim:
    build:
      context: eventsim/.
      dockerfile: Dockerfile
    depends_on:
      - broker
    hostname: eventsim
    container_name: eventsim
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 6G
    oom_kill_disable: true

  # cassandra:
  #   image: cassandra:5.0
  #   hostname: cassandra
  #   container_name: cassandra
  #   ports:
  #     - "9042:9042"
  #   environment:
  #     CASSANDRA_USER: admin
  #     CASSANDRA_PASSWORD: admin
  #     CASSANDRA_CLUSTER_NAME: "Spark metrics"
  #     CASSANDRA_NUM_TOKENS: 256
  #     CASSANDRA_DC: "datacenter1"
  #     CASSANDRA_RACK: "rack1"
  #     CASSANDRA_ENDPOINT_SNITCH: "GossipingPropertyFileSnitch"
  #   healthcheck:
  #     test: ["CMD-SHELL", "cqlsh cassandra -e 'describe keyspaces'"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 10

  # cassandra-init:
  #   image: cassandra:5.0
  #   depends_on:
  #     - cassandra
  #   restart: no
  #   entrypoint: ["/bin/sh", "-c", "chmod +x /init.sh && /init.sh"]
  #   volumes:
  #     - ./cassandra/init.sh:/init.sh

  spark-master:
    # image: bitnami/spark:3.5.1
    # image: bitnami/spark:3.5.1-debian-12-r12
    image: custom/spark:3.5.1-debian-12-r12
    # build:
    #   context: .
    #   dockerfile: ./spark/Dockerfile
    # image: bitnami-with-jars/spark:3.5.1-debian-12-r12
    container_name: spark-master
    # hostname: spark-master
    depends_on:
      - broker
      - eventsim
    # - cassandra
    # - cassandra-init
    ports:
      - "8080:8080"
      - "7077:7077"
      # - "10000:10000"
    environment:
      SPARK_MODE: "master"
      SPARK_MASTER_HOST: "spark-master"
      SPARK_MASTER_PORT_NUMBER: "7077"
      SPARK_MASTER_WEBUI_PORT_NUMBER: "8080"
      SPARK_MASTER_LOG_LEVEL: "INFO"
      SPARK_MASTER_OPTS: "-Dspark.deploy.defaultCores=1 -Dspark.deploy.defaultMemory=3g"
      SPARK_WORKER_MEMORY: "3g"
      SPARK_WORKER_CORES: "2"
      SPARK_WORKER_INSTANCES: "2"
      SPARK_WORKER_PORT: "7078"
      SPARK_WORKER_WEBUI_PORT: "8082"
      SPARK_WORKER_LOG_LEVEL: "INFO"
      SPARK_WORKER_OPTS: "-Dspark.worker.cleanup.enabled=true -Dspark.worker.cleanup.interval=1800 -Dspark.worker.cleanup.appDataTtl=1800"
      GOOGLE_APPLICATION_CREDENTIALS: "/.keys/gcp-service-account.json"
    extra_hosts:
      - "host.docker.internal:${HOST_IP}"
    volumes:
      - ./.keys/gcp-service-account.json:/.keys/gcp-service-account.json
      - ./spark/src:/opt/bitnami/spark/src
      - ./spark/data:/opt/bitnami/spark/data
      - ./spark/apps:/opt/bitnami/spark/apps
      - ./spark/events:/opt/bitnami/spark/events
      - ./spark/conf:/opt/bitnami/spark/conf

  spark-worker:
    # image: bitnami/spark:3.5.1
    # image: bitnami/spark:3.5.1-debian-12-r12
    image: custom/spark:3.5.1-debian-12-r12
    # build:
    #   context: .
    #   dockerfile: ./spark/Dockerfile
    # image: bitnami-with-jars/spark:3.5.1-debian-12-r12
    container_name: spark-worker
    # hostname: spark-worker
    ports:
      - "8082:8082"
    depends_on:
      - broker
      - eventsim
    # - cassandra
    # - cassandra-init
    environment:
      SPARK_MODE: "worker"
      SPARK_MASTER_URL: "spark://spark-master:7077"
      SPARK_WORKER_MEMORY: "3g"
      SPARK_WORKER_CORES: "2"
      SPARK_WORKER_PORT: "7078"
      SPARK_WORKER_WEBUI_PORT: "8082"
      SPARK_WORKER_LOG_LEVEL: "INFO"
      SPARK_WORKER_OPTS: "-Dspark.worker.cleanup.enabled=true -Dspark.worker.cleanup.interval=1800 -Dspark.worker.cleanup.appDataTtl=1800"
      GOOGLE_APPLICATION_CREDENTIALS: "/.keys/gcp-service-account.json"
    extra_hosts:
      - "host.docker.internal:${HOST_IP}"
    volumes:
      - ./.keys/gcp-service-account.json:/.keys/gcp-service-account.json
      - ./spark/src:/opt/bitnami/spark/src
      - ./spark/data:/opt/bitnami/spark/data
      - ./spark/apps:/opt/bitnami/spark/apps
      - ./spark/events:/opt/bitnami/spark/events
      - ./spark/conf:/opt/bitnami/spark/conf
# volumes:
#   spark-events:
